def rail_fence_encrypt(plaintext, rails):
    fence = [''] * rails
    direction = 1  # 1 for down, -1 for up
    row = 0

    for char in plaintext:
        fence[row] += char
        row += direction

        # Change direction when reaching the top or bottom rail
        if row == 0 or row == rails - 1:
            direction = -direction

    ciphertext = ''.join(fence)
    return ciphertext

def rail_fence_decrypt(ciphertext, rails):
    fence = [''] * rails
    direction = 1
    row = 0

    # Calculate the length of each rail
    rail_lengths = [len(ciphertext) // rails + (1 if i < len(ciphertext) % rails else 0) for i in range(rails)]

    for length in rail_lengths:
        fence[row] += ciphertext[:length]
        ciphertext = ciphertext[length:]
        row += direction
        direction = -direction

    plaintext = ''
    direction = 1
    row = 0

    for _ in range(len(fence[0])):
        plaintext += fence[row][0]
        fence[row] = fence[row][1:]
        row += direction
        direction = -direction

    return plaintext

# Example usage
plaintext = "HELLO, WORLD!"
rails = 3

# Encrypt the message
encrypted_text = rail_fence_encrypt(plaintext, rails)
print("Original Text:", plaintext)
print(f"Encrypted Text (Rails={rails}):", encrypted_text)

# Decrypt the message
decrypted_text = rail_fence_decrypt(encrypted_text, rails)
print("Decrypted Text:", decrypted_text)
